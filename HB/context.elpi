/*        Hierarchy Builder: algebraic hierarchies made easy
    This software is released under the terms of the MIT license              */

namespace context {

pred declare i:mixins,
  o:list term, o:term, o:list prop, o:list constant.
declare FLwP Params TheKey MSL CL :- !, std.do! [
  factories-provide FLwP MLwP,
  declare.params-key MLwP Params TheKey _MLwA,
  declare.mixins TheKey Params FLwP MSL CL
].

pred declare.params-key i:w-params A, o:list term, o:term, o:A.
declare.params-key MLwP Params TheKey Out :- !, std.do! [
  if-verbose (coq.say {header} "declaring parameters and key as section variables"),
  declare.params MLwP Params KId KTy F,
  log.coq.env.add-section-variable-noimplicits KId KTy C,
  TheKey = global (const C),
  Out = F TheKey
].

pred declare.params i:w-params A, o:list term, o:id, o:term, o:(term -> A).
declare.params (w-params.cons PId PTy F) [P|Params] KId KTy Out :- !, std.do! [
  log.coq.env.add-section-variable-noimplicits PId PTy C,
  P = global (const C),
  declare.params (F P) Params KId KTy Out
].
declare.params (w-params.nil KId KTy F) [] KId KTy F :- !.

% [declare.mixins TheType Parameters Factories Clauses] postulates a
% (section) context with all the mixins provided by the factories and all
% the structure instances we can derive on TheType from these. Clauses
% contain mixin-src for each postulated mixin
pred declare.mixins i:term, i:list term, i:list-w-params factoryname, o:list prop, o:list constant.
declare.mixins TheType TheParams GRFSwP MSL CL :-  std.do! [
  factories-provide GRFSwP MLwP,
  if-verbose (coq.say "Here is the list of mixins to declare (the order matters): "
    {list-w-params_list MLwP}),
  apply-w-params MLwP TheParams TheType MLwAllArgs,
  std.fold MLwAllArgs (pr [] []) (private.postulate-mixin TheType) (pr CL MSL),
  std.forall MSL (ms\ log.coq.env.accumulate current "hb.db" (clause _ _ ms)),
].

/* ------------------------------------------------------------------------- */
/* ----------------------------- private code ------------------------------ */
/* ------------------------------------------------------------------------- */

namespace private {

% Given a type T, a fresh number N, and a mixin M it postulates
% a variable "mN" inhabiting M applied to T and
% all its dependencies, previously postulated and associated
% to the corresponding mixin using mixin-for
pred postulate-mixin i:term, i:w-args mixinname, i:pair (list constant) (list prop),
                     o:pair (list constant) (list prop).
postulate-mixin TheType (triple M Ps T) (pr CL MSL) (pr OutCL [MC|MSL]) :- MSL => std.do! [
  Name is "local_mixin_" ^ {gref->modname M 2 "_"},

  if-verbose (coq.say "HB: postulate" Name "on" {coq.term->string T}),
  if-verbose (coq.say "HB: postulate-mixin infers all mixin args"
    "Ps =" Ps ", T =" T ", M =" M),
  if-verbose (
    coq.say "---------------- HB: postulate-mixin prints constraints -------------",
    print_constraints,
    coq.say "------------------------------------------------------------"
  ),
  synthesis.infer-all-gref-deps Ps T M TySkel,
  % was synthesis.infer-all-mixin-args Ps T M TySkel,
  % if-verbose (coq.say "HB: postulate-mixin checking" TySkel),
  % std.assert-ok! (coq.typecheck Ty _) "postulate-mixin: Ty illtyped",
  std.assert-ok! (coq.elaborate-ty-skeleton TySkel _ Ty)
    "postulate-mixin: Ty illtyped",
  log.coq.env.add-section-variable-noimplicits Name Ty C,

  MC = mixin-src T M (global (const C)),
  MC => get-option "local" tt =>
    instance.declare-all TheType {findall-classes-for [M]} NewCSL,
  std.append CL {std.map NewCSL snd} OutCL
].

}}
